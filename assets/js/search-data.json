{
  
    
        "post0": {
            "title": "Title",
            "content": "input_file = &#39;owid-covid-data.csv&#39; df = pd.read_csv(input_file) df[&#39;ds&#39;] = pd.to_datetime(df[&#39;date&#39;], format=&quot;%d/%m/%Y&quot;) df = df.sort_values(by=[&#39;ds&#39;]) . Explore data . valuesToDrop = [&#39;Asia&#39;, &#39;World&#39;, &#39;International&#39;, &#39;European Union&#39;, &#39;Europe&#39;, &#39;North America&#39;, &#39;Africa&#39;, &#39;South America&#39;, &#39;Oceania&#39;] df1 = df[~(df[&#39;location&#39;].isin(valuesToDrop))] df1 = df1.dropna(subset=[&#39;new_cases&#39;]) . cases_dist = px.sunburst(df1, path=[&#39;continent&#39;, &#39;location&#39;], values = &#39;new_cases&#39;, color=&#39;new_cases&#39;, color_continuous_scale = px.colors.sequential.Magenta, title = &#39;Covid cases distribution&#39; ) # cases_dist.show() . Plotting covid new cases choropleth map . . . Time Series Analysis . df4 = df.groupby(by=[&#39;ds&#39;])[&#39;new_cases&#39;].sum().reset_index().sort_values(by=&#39;ds&#39;, ascending=True) df4 = df4.rename(columns={&#39;new_cases&#39;:&#39;y&#39;}) . from prophet import Prophet from prophet.plot import plot_plotly, plot_components_plotly, add_changepoints_to_plot # instantiate the model, fit the timeseries to the model model = Prophet().fit(df4) # predict future cases future = model.make_future_dataframe(periods=365) forecast = model.predict(future) fig = model.plot(forecast) a = add_changepoints_to_plot(fig.gca(), model, forecast) # fig; . INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this. INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this. . Initial log joint probability = -9.54837 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 70 938.957 0.00157276 128.333 1.907e-05 0.001 138 LS failed, Hessian reset 99 939.815 0.000128232 50.4087 0.7411 0.7411 177 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 149 940.955 0.00105143 72.7678 9.419e-06 0.001 274 LS failed, Hessian reset 199 941.504 1.17708e-05 69.7156 0.3262 0.3262 347 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 249 941.506 5.23168e-08 77.369 0.2579 1 423 Optimization terminated normally: Convergence detected: relative gradient magnitude is below tolerance . hyperparameters tuning . m = Prophet(weekly_seasonality=False, changepoint_prior_scale=0.4, changepoint_range=0.8).fit(df4) future = m.make_future_dataframe(periods=365) forecast = m.predict(future) fig1 = m.plot(forecast, figsize=(20, 12)) ax = fig1.gca() ax.set_title(&quot;Covid cases projection&quot;, size=24) ax.set_xlabel(&#39;Date&#39;, size=20) ax.set_ylabel(&#39;Cases&#39;, size=20) ax.tick_params(axis=&quot;x&quot;, labelsize=18) ax.tick_params(axis=&quot;y&quot;, labelsize=18) ax.yaxis.get_major_formatter().set_scientific(False) . INFO:prophet:Disabling yearly seasonality. Run prophet with yearly_seasonality=True to override this. INFO:prophet:Disabling daily seasonality. Run prophet with daily_seasonality=True to override this. . Initial log joint probability = -9.54837 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 99 991.673 0.0359472 30.5977 1 1 124 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 197 1006.66 0.000135233 8.33226 6.068e-06 0.001 282 LS failed, Hessian reset 199 1006.69 0.00582461 19.6152 1 1 285 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 299 1010.11 0.00610452 27.3128 0.1417 0.8632 402 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 397 1012.49 0.000425993 34.5145 2.078e-05 0.001 563 LS failed, Hessian reset 399 1012.59 0.00733377 11.8145 1 1 566 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 438 1013.93 0.00037775 24.5641 2.372e-05 0.001 654 LS failed, Hessian reset 499 1014.52 0.020022 17.107 0.4228 1 736 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 571 1015.17 0.000224349 15.6829 6.343e-06 0.001 860 LS failed, Hessian reset 599 1015.27 0.00190556 12.9943 1 1 896 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 654 1015.51 0.000144255 9.44615 5.975e-06 0.001 1000 LS failed, Hessian reset 699 1015.65 0.00689767 7.94546 1 1 1062 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 722 1015.66 8.60491e-05 7.39676 1.042e-05 0.001 1127 LS failed, Hessian reset 796 1015.69 4.43309e-05 6.53984 6.232e-06 0.001 1264 LS failed, Hessian reset 799 1015.69 7.05809e-06 4.81613 0.5934 0.5934 1268 Iter log prob ||dx|| ||grad|| alpha alpha0 # evals Notes 841 1015.69 5.87928e-05 9.38292 6.446e-06 0.001 1372 LS failed, Hessian reset 862 1015.69 9.62217e-07 5.84872 0.08992 0.9129 1401 Optimization terminated normally: Convergence detected: relative gradient magnitude is below tolerance .",
            "url": "https://stepmn818.github.io/ds-blog/2021/09/08/Covid19.html",
            "relUrl": "/2021/09/08/Covid19.html",
            "date": " • Sep 8, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://stepmn818.github.io/ds-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://stepmn818.github.io/ds-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://stepmn818.github.io/ds-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://stepmn818.github.io/ds-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}